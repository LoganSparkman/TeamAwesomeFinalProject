// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

namespace WebApplication1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191205104844_updatedAttendanceAgain")]
    partial class updatedAttendanceAgain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplication1.Models.ApplicantRating", b =>
                {
                    b.Property<int>("ApplicantRatingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(5000);

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("RatingCriteriumID");

                    b.Property<int>("ScoreAssigned");

                    b.Property<int>("StudentID");

                    b.Property<int>("TermID");

                    b.Property<string>("UserID")
                        .IsRequired();

                    b.HasKey("ApplicantRatingID");

                    b.HasIndex("RatingCriteriumID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TermID");

                    b.HasIndex("UserID");

                    b.ToTable("ApplicantRating");
                });

            modelBuilder.Entity("WebApplication1.Models.Assessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassID");

                    b.Property<string>("Description")
                        .HasMaxLength(50000);

                    b.Property<int>("PointsPossible");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("AssessmentId");

                    b.HasIndex("ClassID");

                    b.ToTable("Assessment");
                });

            modelBuilder.Entity("WebApplication1.Models.Attendance", b =>
                {
                    b.Property<int>("StudentID");

                    b.Property<DateTime>("Date");

                    b.Property<int>("AttendanceStatusID");

                    b.Property<string>("CourseName")
                        .IsRequired();

                    b.Property<DateTime>("TimeIn");

                    b.HasKey("StudentID", "Date");

                    b.HasIndex("AttendanceStatusID");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("WebApplication1.Models.AttendanceStatus", b =>
                {
                    b.Property<int>("AttendanceStatusID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("AttendanceStatusID");

                    b.ToTable("AttendanceStatus");
                });

            modelBuilder.Entity("WebApplication1.Models.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Capacity");

                    b.Property<int>("CourseID");

                    b.Property<int>("TermID");

                    b.HasKey("ClassID");

                    b.HasIndex("CourseID");

                    b.HasIndex("TermID");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("WebApplication1.Models.ClassInstructor", b =>
                {
                    b.Property<int>("ClassID");

                    b.Property<string>("UserID");

                    b.HasKey("ClassID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("ClassInstructor");
                });

            modelBuilder.Entity("WebApplication1.Models.ClassSchedule", b =>
                {
                    b.Property<int>("ClassID");

                    b.Property<int>("ScheduleID");

                    b.HasKey("ClassID", "ScheduleID");

                    b.HasIndex("ScheduleID");

                    b.ToTable("ClassSchedule");
                });

            modelBuilder.Entity("WebApplication1.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("CourseID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("WebApplication1.Models.File", b =>
                {
                    b.Property<int>("FileID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileTypeID");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("StudentID");

                    b.HasKey("FileID");

                    b.HasIndex("FileTypeID");

                    b.HasIndex("StudentID");

                    b.ToTable("File");
                });

            modelBuilder.Entity("WebApplication1.Models.FileType", b =>
                {
                    b.Property<int>("FileTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("FileTypeID");

                    b.ToTable("FileType");
                });

            modelBuilder.Entity("WebApplication1.Models.Note", b =>
                {
                    b.Property<int>("NoteID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("NoteTypeID");

                    b.Property<int>("StudentID");

                    b.Property<string>("UserID")
                        .IsRequired();

                    b.HasKey("NoteID");

                    b.HasIndex("NoteTypeID");

                    b.HasIndex("StudentID");

                    b.HasIndex("UserID");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("WebApplication1.Models.NoteType", b =>
                {
                    b.Property<int>("NoteTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("NoteTypeID");

                    b.ToTable("NoteType");
                });

            modelBuilder.Entity("WebApplication1.Models.PublicSchoolClassSchedule", b =>
                {
                    b.Property<int>("PublicSchoolClassScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ScheduleID");

                    b.Property<int>("StudentPublicSchoolClassID");

                    b.HasKey("PublicSchoolClassScheduleID");

                    b.HasIndex("ScheduleID");

                    b.HasIndex("StudentPublicSchoolClassID");

                    b.ToTable("PublicSchoolClassSchedule");
                });

            modelBuilder.Entity("WebApplication1.Models.RatingCriterium", b =>
                {
                    b.Property<int>("RatingCriteriumID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("MaxScore");

                    b.HasKey("RatingCriteriumID");

                    b.ToTable("RatingCriterium");
                });

            modelBuilder.Entity("WebApplication1.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("DayOfWeek");

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("ScheduleID");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("WebApplication1.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<short>("EnglishLevel");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("GPSLatitude");

                    b.Property<decimal>("GPSLongitude");

                    b.Property<string>("GuardianName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("GuardianType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("ITLevel");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<byte[]>("Picture");

                    b.Property<short>("PublicSchoolLevel");

                    b.Property<int>("StudentStatusID");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("StudentID");

                    b.HasIndex("StudentStatusID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("WebApplication1.Models.StudentAssessment", b =>
                {
                    b.Property<int>("StudentID");

                    b.Property<int>("AssessmentID");

                    b.Property<string>("Comment")
                        .HasMaxLength(5000);

                    b.Property<int>("PointsAwarded");

                    b.HasKey("StudentID", "AssessmentID");

                    b.HasIndex("AssessmentID");

                    b.ToTable("StudentAssessment");
                });

            modelBuilder.Entity("WebApplication1.Models.StudentClass", b =>
                {
                    b.Property<int>("ClassID");

                    b.Property<int>("StudentID");

                    b.HasKey("ClassID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentClass");
                });

            modelBuilder.Entity("WebApplication1.Models.StudentPublicSchoolClass", b =>
                {
                    b.Property<int>("StudentPublicSchoolClassID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .HasMaxLength(500);

                    b.Property<int>("StudentID");

                    b.HasKey("StudentPublicSchoolClassID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentPublicSchoolClass");
                });

            modelBuilder.Entity("WebApplication1.Models.StudentStatus", b =>
                {
                    b.Property<int>("StudentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("StudentStatusID");

                    b.ToTable("StudentStatus");
                });

            modelBuilder.Entity("WebApplication1.Models.Term", b =>
                {
                    b.Property<int>("TermID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<short>("TimeOfYear");

                    b.HasKey("TermID");

                    b.ToTable("Term");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.ApplicantRating", b =>
                {
                    b.HasOne("WebApplication1.Models.RatingCriterium", "RatingCriterium")
                        .WithMany()
                        .HasForeignKey("RatingCriteriumID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Assessment", b =>
                {
                    b.HasOne("WebApplication1.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Attendance", b =>
                {
                    b.HasOne("WebApplication1.Models.AttendanceStatus", "AttendanceStatus")
                        .WithMany()
                        .HasForeignKey("AttendanceStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Class", b =>
                {
                    b.HasOne("WebApplication1.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.ClassInstructor", b =>
                {
                    b.HasOne("WebApplication1.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.ClassSchedule", b =>
                {
                    b.HasOne("WebApplication1.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.File", b =>
                {
                    b.HasOne("WebApplication1.Models.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Note", b =>
                {
                    b.HasOne("WebApplication1.Models.NoteType", "NoteType")
                        .WithMany()
                        .HasForeignKey("NoteTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.PublicSchoolClassSchedule", b =>
                {
                    b.HasOne("WebApplication1.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.StudentPublicSchoolClass", "StudentPublicSchoolClass")
                        .WithMany()
                        .HasForeignKey("StudentPublicSchoolClassID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Student", b =>
                {
                    b.HasOne("WebApplication1.Models.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.StudentAssessment", b =>
                {
                    b.HasOne("WebApplication1.Models.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.StudentClass", b =>
                {
                    b.HasOne("WebApplication1.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.StudentPublicSchoolClass", b =>
                {
                    b.HasOne("WebApplication1.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
